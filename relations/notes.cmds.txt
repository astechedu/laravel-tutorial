
-------------------------------------------------------------------------
Faker:                       //https://github.com/fzninotto/Faker

Generato propeties (Like name,address,etc) are called formatters
$faker->name, address, text, state, city, country,postcode, randomDigit, numberBetween($min = 1000, $max =9000), phoneNumber, tollFreePhoneNumber, e164PhoneNumber, compony, date, time, month, year, timezone, dateTime, image, imageUrl, mimeType, uuid, en13 (BarCode), en8(BarCode), latitude, longitude,
randomLetter,shuffle('hello','world'),sentence,paragraph,title,firstName,lastName,

Example:   
         'phone' => fake()->numberBetween($min = 1877663310, $max =1908347381),  
         'color' => fake()->colorName, 
-------------------------------------------------------------------------

Topics: 

1. Seeding data Using ForeignId       //Insert Data useing seeders


2. Relationship: 

   OneToOne, OneToMany, ManyToMany,
   OneToOne(Polymorphic), OneToMamy(Polymoropic), ManyToMany(Polymorphic)

------------------------------------------------------------------------


1. 

Data Seeding Using Foreign Tables:
----------------------------------


php artian make:migration create_users_table
php artian make:migration create_phones_table

php artisan make:model User
php artisan make:Phone Phone

php artisan migrate
php artisan migrate:reset
php artisan migrate:rollback


php artisan db:seed

-------------------------------------------------------------------------------------

Models: 
  User, Phone                 // Tables: users, phones

1. User: Default

2. Phone: 

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Phone extends Model
{
    use HasFactory;

}

-----------------------------------------------------------------------------------------

>> Migrations: 
..............

  users (default) , phones

1. users: Default


2. phones

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{

    public function up(): void
    {
        Schema::create('phones', function (Blueprint $table) {
            $table->id();
            $table->unsignedBigInteger('user_id');
            $table->string('phone');
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            
            //Or $table->foreignId('user_id')->constrained()->onDelete('cascade');
           

      //1. 
        //$table->unsignedBigInteger('user_id');            
        //$table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');

      //2.Or
         //$table->foreignId('user_id')->constrained()->onDelete('cascade');
           



            $table->timestamps();
        });
    }

    public function down(): void
    {   
        Schema::dropIfExists('phones');
    }
};



----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------



>> Factories:                   //Video: https://youtu.be/8K83uv6fo5o?t=511
.............

  UserFactory, PhoneFactory

1. UserFactory: Default


2. PhoneFactory:

<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Models\User;

class PhoneFactory extends Factory
{

    public function definition(): array
    {        
        return [
            'phone' => fake()->phoneNumber(),
            'user_id' => User::all()->random()->id,
            'created_at' => fake()->dateTime($max = 'now'),
            'updated_at' => fake()->dateTime($max = 'now'),
            
        ];        
    }
}


----------------------------------------------------------------------------------

DatabaseSeeder: 

<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Phone;

class DatabaseSeeder extends Seeder
{

    public function run(): void
    {
          \App\Models\User::factory(10)->create();
          \App\Models\Phone::factory(10)->create();

        // \App\Models\User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);
        
    }
}




------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

>> Separate Seeders:             // Seed Data With Foreign Key Tables
   UserSeeder, PhoneSeeder
                                 //Video: https://youtu.be/8K83uv6fo5o?t=511
 1. UserSeeder:

<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\User;
use Faker\Factory as Faker;

class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $faker = Faker::create();  

       //for($i=0;$i<10;$i++)
        $user = new User;
        
        $user->name = $faker->name;
        $user->email = $faker->email;
        $uer->password = $fakr->password;
        $user->remember_token = 'AFCFEFEFREF';
        $user->save();
       //}
    }
}


 2. PhoneSeeder:


<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

use App\Models\Phone;
use Faker\Factory as Faker;
use App\Models\User;

class StudentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $faker = Faker::create();  
     //for($i=0;$i<10;$i++)

        $phone = new Phone;
        
         $phone->modal = $faker->name;
         $phone->user_id = User::all()->random()->id();
         $phone->save();
       //}
    }
}



3. DatabaseSeeder:

  public function run(){

        $this->call([
             UserSeeder::class,
             PhoneSeeder::class
        ]);
  }



4. OR 

  public function run(){

        \App\Models\User::factory(1000)->create()->each(
           function($user){
               \App\Models\Phone::factory(1000)->create(['user_id' => $user->id]);   //Not random id
           }
        );
  }



------------------------------------------------------------------------------------
------------------------------------------------------------------------------------


Laravel Joins: 

https://techsolutionstuff.com/post/inner-join-query-in-laravel-9-example


1. 

SQL Query:

SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;


....................................................................................

2.

Read Also: Group By Query In Laravel 9 Example

 

select `users`.`id`, `users`.`name`, `users`.`email`, `countries`.`name` as `country_name` 
from `users` 
inner join `countries` on `countries`.`id` = `users`.`country_id`

.....................................................................................

3.

Laravel Query:

use App\Models\User;

$users = User::select('users.id', 'users.name', 'users.email', 'phones.phone')
        ->join('phones', 'phones.user_id', '=', 'users.id')
        ->get();


echo "<pre>"; print_r($users);


......................................................................................


4. 

Join Using DB:

use Illuminate\Support\Facades\DB;

$users = DB::table('users')
            ->join('phones', 'phones.user_id', '=', 'users.id')            
            //->select('users.*')
            ->select('users.name','users.email','phones.phone')
            ->get();


echo "<pre>";print_r($users);

........................................................................................

5.

Join() with 3 Tables:

use App\Models\User;

Now, we will give an example of joining 3 tables in laravel and all tables are connected with each other.

$users = User::join('posts', 'posts.user_id', '=', 'users.id')
              ->join('comments', 'comments.post_id', '=', 'posts.id')
              ->get(['users.*', 'posts.descrption']);


..........................................................................................

6.

Subquery Joins with groupBy() Function:

use Illuminate\Support\Facades\DB;

$posts = DB::table('posts')
                   ->select('user_id', DB::raw('MAX(created_at) as last_post_created_at'))
                   ->where('is_published', true)
                   ->groupBy('user_id');


.............................................................................................


2.

======>   Relationship <==============

//--> One To One <--//

Tables: users, contacts
Models: User, Contact
Factories: User, Contact


.One User has one contact 
.One Contact belongs to one user

*User: 
  public function contact(){
    return $this->hasOne(Contact::class);
  }

*Contact:   
  protected $fillable = ['phone', user_id'];

  public function user(){
     return $this->belongsTo(User::class);
  }

*ContactFactory: 

  public function definition(){
    return [
       'phone' => $this->faker->phoneNumber,
       'description' => $this->faler->paragraph(6),
       'user_id' => \App\Models\User::all()->random()->id,
    ];
  }



//--> One To Many <--//

Tables: users, posts                     //Or more tables
Models: User, Post                       //Or more models
Factories: PostFactory, UserFactory      //Or more factories


*User: 
  public function posts(){
    return $this->hasMany(Post::class);
  }


*Post: 
  
  protected $fillable = ['title','description','user_id'];

  public function user(){
     return $this->belongsTo(User::class);
  }


*PostFactory: 

  public function definition(){
    return [
       'title' => $this->faker->paragraph(1),
       'description' => $this->faler->paragraph(4),
       'user_id' => \App\Models\User::all()->random()->id,
    ];
  }

*DatabaseSeeder: 
    \App\Models\User::factory(100)->create();
    \App\Models\Post::factory(100)->create();
  //Or 
  //$this->call([
     UserSeeder::class,
     PostSeeder::class
  ]);


CMDS: php artisan migrage:fresh --seed


*Fetch Data any where:

use App\Models\User;
use App\Models\Post;

//$user = User::all();
//$user = User::find(1);
//$user = User::with(['posts','contact'])->find(1);    //If posts, contact or more
//dd($user);
//dd($user->toArray());    //User showing with oosts,contact ..etc (If more)
//dd($user->posts);        //If post, only posts records showing
//dd($user->contact);     //If contact, only contact recods showing


//Or Same As Above
//$post = Post::all();
//$post = Post::with(['user'])->find(1);     //Showing post with user

//$contact = Contact::all();
//$contact = Contact::with(['user'])->find(1);   //Showing contact with user

//More If more table are available

................... X .......................................................


//----> Many To Many <----//



Tables: posts,              //Note: A Post belongs to many categories  
        categories,         //Note: A Category belongs to many posts  
        category_post  (Third Table)

Models: Post, Category
                                    
Factories: 
          PostFactory,       //fake()->sentence
          CategoryFactory
           
Migration: 
          create_posts_table, 
          create_categories_table,
          create_category_post_table


public function up(){
    Schema::create('category_post', function(Blueprint $table){
       $table->id(),
       $table->foreignId('category_id')->constrained()->onDelete('cascade');
       $table->foreignId('post_id')->constrained()->onDelete('cascade');  
       $table->timestamp();  
    })
}


//In Post Model: 

public function categories(){
    return $this->blongsToMany(Category::class);
}


//In Category Model:

protected $fillable = ['name'];

public function posts(){
    return $this->blongsToMany(Post::class);
}


//Display posts: 


$categories = Category::all();
$post = Post::get()->first();
dd($post->toArray());

$post = Post::with('categories')->first();
$post->categories()->attach($categories);   //attach(), detach(), sync([1,2])

dd($post->toArray());

-----------------------------------------------------------------------------------------

--------------------------------- X -----------------------------------------------------





//--> Deep Relationship <---

Video: 
   https://youtu.be/4hBv0GwhyqM?t=632


Posts: 

  1.     ->Usser
         ->Tags
         ->Likes
             .User
   2.     ->Comments:
              .User
              .Likes
    3.        ->Replies
                  .likes




-----------------------------------------------------------------------------------------

---> Polymorphic Relationship --->



//Video: https://youtu.be/dlbY5PRnv-s?t=150

//--> One To One   (Polymorphic Relationship) <-----
//--> One To Many  (Polymorphic Relationship) <-----
//--> Many To Many (Polymorphic Relationship) <-----

-----------------------------------------------------------------------------------------
      


Faker: 


$faker = Faker\Factory::create();

$array = [
 'name' => $faker->name,
 'title' => $faker->title,
 'state' => $faker->state,
 'counter' => $faker->country,
 'phone_no' => $faker->phoneNumber,
 'random_digit' => $faker->randomDigit,
 'postcode' => $faker->postcode,
 'date' => $faker->date,
 'time' => $faker->time,
 'text' => $faker->text,
 'imageUrl' => $faker->imageUrl,
 'phonenumber' => $faker->e164PhoneNumber,
 'mimetype' => $faker->mimeType,
 'tollfreeno' => $faker->tollFreePhoneNumber,
 'colorname' => $faker->colorName,
 'paragraph' => $faker->paragraph(1),
 'suffle' => $faker->shuffle('relationshipinlaravel','world'),
];


echo "<pre>";print_r($array);

-----------------------------------------------------------------------